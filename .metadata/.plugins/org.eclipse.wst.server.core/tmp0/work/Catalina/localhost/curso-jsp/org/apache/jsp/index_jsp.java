/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.23
 * Generated at: 2024-05-26 13:57:51 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\" data-bs-theme=\"dark\">\r\n");
      out.write("<head>\r\n");
      out.write("	<meta charset=\"ISO-8859-1\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n");
      out.write("	<title>Curso JSP</title>\r\n");
      out.write("	\r\n");
      out.write("	<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH\" crossorigin=\"anonymous\">\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	<link rel=\"stylesheet\" href=\"Style.css\">\r\n");
      out.write("	\r\n");
      out.write("</head>\r\n");
      out.write("<body class=\"d-flex align-items-center py-4 bg-body-tertiary\">\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<main class=\"form-signin w-100 m-auto\">\r\n");
      out.write("	\r\n");
      out.write("		<form action=\"ServletLogin\" method=\"post\" class=\"needs-validation\">\r\n");
      out.write("			<input type=\"hidden\" value=\"");
 request.getParameter("url"); 
      out.write("\" name=\"url\">\r\n");
      out.write("			\r\n");
      out.write("			<img class=\"mb-4\" src=\"https://upload.wikimedia.org/wikipedia/pt/f/f6/Charlotte_Hornets.png\">\r\n");
      out.write("			\r\n");
      out.write("			<h1 class=\"h3 mb-3 fw-normal\">Bem vindo ao curso de JSP</h1>\r\n");
      out.write("			\r\n");
      out.write("			<div class=\"form-floating pb-2\">\r\n");
      out.write("				<input name=\"login\" type=\"text\" id=\"floatingInput\" class=\"form-control\" placeholder=\"Seu usuário\" required>\r\n");
      out.write("				<label for=\"floatingInput\">Usuario</label>\r\n");
      out.write("				\r\n");
      out.write("			</div>\r\n");
      out.write("			\r\n");
      out.write("			<div class=\"form-floating pb-5\">\r\n");
      out.write("			\r\n");
      out.write("				<input name=\"senha\" type=\"password\" id=\"floatingPassword\" class=\"form-control\" placeholder=\"Sua senha\" required>\r\n");
      out.write("				<label for=\"floatingPassword\">Senha</label>\r\n");
      out.write("				\r\n");
      out.write("			</div>\r\n");
      out.write("			\r\n");
      out.write("			<button class=\"btn btn-primary w-100 py-2\" type=\"submit\">Entrar</button>\r\n");
      out.write("			\r\n");
      out.write("			<p class=\"mt-5 mb-3 text-body-secondary\">© 2024 - ITALO MIRANDA FONTENELE</p>\r\n");
      out.write("\r\n");
      out.write("		</form>\r\n");
      out.write("		\r\n");
      out.write("	 	<h4 class=\"msg-error\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${msg}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</h4>\r\n");
      out.write("	\r\n");
      out.write("	</main>\r\n");
      out.write("	\r\n");
      out.write("	<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("	\r\n");
      out.write("	<script type=\"text/javascript\">\r\n");
      out.write("		// Example starter JavaScript for disabling form submissions if there are invalid fields\r\n");
      out.write("		(() => {\r\n");
      out.write("		  'use strict'\r\n");
      out.write("	\r\n");
      out.write("		  // Fetch all the forms we want to apply custom Bootstrap validation styles to\r\n");
      out.write("		  const forms = document.querySelectorAll('.needs-validation')\r\n");
      out.write("	\r\n");
      out.write("		  // Loop over them and prevent submission\r\n");
      out.write("		  Array.from(forms).forEach(form => {\r\n");
      out.write("		    form.addEventListener('submit', event => {\r\n");
      out.write("		      if (!form.checkValidity()) {\r\n");
      out.write("		        event.preventDefault()\r\n");
      out.write("		        event.stopPropagation()\r\n");
      out.write("		      }\r\n");
      out.write("	\r\n");
      out.write("		      form.classList.add('was-validated')\r\n");
      out.write("		    }, false)\r\n");
      out.write("		  })\r\n");
      out.write("		})()\r\n");
      out.write("		\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
